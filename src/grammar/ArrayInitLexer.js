// Generated from ./grammar/ArrayInit.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,38,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,
2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
1,19,1,19,1,19,1,20,1,20,1,21,1,21,5,21,141,8,21,10,21,12,21,144,9,21,1,
22,4,22,147,8,22,11,22,12,22,148,1,23,1,23,5,23,153,8,23,10,23,12,23,156,
9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,4,25,165,8,25,11,25,12,25,166,1,
25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,
36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,154,0,38,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,4,3,0,65,90,94,
94,97,122,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,210,0,1,
1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,83,1,0,0,0,
5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,95,
1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,105,
1,0,0,0,27,107,1,0,0,0,29,109,1,0,0,0,31,111,1,0,0,0,33,113,1,0,0,0,35,125,
1,0,0,0,37,128,1,0,0,0,39,132,1,0,0,0,41,136,1,0,0,0,43,138,1,0,0,0,45,146,
1,0,0,0,47,150,1,0,0,0,49,159,1,0,0,0,51,164,1,0,0,0,53,170,1,0,0,0,55,172,
1,0,0,0,57,175,1,0,0,0,59,178,1,0,0,0,61,180,1,0,0,0,63,182,1,0,0,0,65,185,
1,0,0,0,67,188,1,0,0,0,69,191,1,0,0,0,71,194,1,0,0,0,73,196,1,0,0,0,75,201,
1,0,0,0,77,78,5,104,0,0,78,79,5,105,0,0,79,80,5,114,0,0,80,81,5,97,0,0,81,
82,5,109,0,0,82,2,1,0,0,0,83,84,5,59,0,0,84,4,1,0,0,0,85,86,5,43,0,0,86,
6,1,0,0,0,87,88,5,45,0,0,88,8,1,0,0,0,89,90,5,42,0,0,90,10,1,0,0,0,91,92,
5,47,0,0,92,12,1,0,0,0,93,94,5,61,0,0,94,14,1,0,0,0,95,96,5,35,0,0,96,16,
1,0,0,0,97,98,5,36,0,0,98,18,1,0,0,0,99,100,5,58,0,0,100,20,1,0,0,0,101,
102,5,38,0,0,102,22,1,0,0,0,103,104,5,44,0,0,104,24,1,0,0,0,105,106,5,40,
0,0,106,26,1,0,0,0,107,108,5,41,0,0,108,28,1,0,0,0,109,110,5,123,0,0,110,
30,1,0,0,0,111,112,5,125,0,0,112,32,1,0,0,0,113,114,5,112,0,0,114,115,5,
114,0,0,115,116,5,105,0,0,116,117,5,110,0,0,117,118,5,116,0,0,118,119,5,
80,0,0,119,120,5,108,0,0,120,121,5,101,0,0,121,122,5,97,0,0,122,123,5,115,
0,0,123,124,5,101,0,0,124,34,1,0,0,0,125,126,5,105,0,0,126,127,5,102,0,0,
127,36,1,0,0,0,128,129,5,110,0,0,129,130,5,117,0,0,130,131,5,109,0,0,131,
38,1,0,0,0,132,133,5,118,0,0,133,134,5,117,0,0,134,135,5,108,0,0,135,40,
1,0,0,0,136,137,5,118,0,0,137,42,1,0,0,0,138,142,7,0,0,0,139,141,7,1,0,0,
140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,44,1,
0,0,0,144,142,1,0,0,0,145,147,7,2,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,
146,1,0,0,0,148,149,1,0,0,0,149,46,1,0,0,0,150,154,5,34,0,0,151,153,9,0,
0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,
157,1,0,0,0,156,154,1,0,0,0,157,158,5,34,0,0,158,48,1,0,0,0,159,160,5,39,
0,0,160,161,9,0,0,0,161,162,5,39,0,0,162,50,1,0,0,0,163,165,7,3,0,0,164,
163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,1,0,
0,0,168,169,6,25,0,0,169,52,1,0,0,0,170,171,5,10,0,0,171,54,1,0,0,0,172,
173,5,61,0,0,173,174,5,61,0,0,174,56,1,0,0,0,175,176,5,33,0,0,176,177,5,
61,0,0,177,58,1,0,0,0,178,179,5,62,0,0,179,60,1,0,0,0,180,181,5,60,0,0,181,
62,1,0,0,0,182,183,5,62,0,0,183,184,5,61,0,0,184,64,1,0,0,0,185,186,5,60,
0,0,186,187,5,61,0,0,187,66,1,0,0,0,188,189,5,38,0,0,189,190,5,38,0,0,190,
68,1,0,0,0,191,192,5,124,0,0,192,193,5,124,0,0,193,70,1,0,0,0,194,195,5,
33,0,0,195,72,1,0,0,0,196,197,5,116,0,0,197,198,5,114,0,0,198,199,5,117,
0,0,199,200,5,101,0,0,200,74,1,0,0,0,201,202,5,102,0,0,202,203,5,97,0,0,
203,204,5,108,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,76,1,0,0,0,5,0,
142,148,154,166,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ArrayInitLexer extends antlr4.Lexer {

    static grammarFileName = "ArrayInit.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'hiram'", "';'", "'+'", "'-'", "'*'", "'/'", 
                         "'='", "'#'", "'$'", "':'", "'&'", "','", "'('", 
                         "')'", "'{'", "'}'", "'printPlease'", "'if'", "'num'", 
                         "'vul'", "'v'", null, null, null, null, null, "'\\n'", 
                         "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", 
                         "'||'", "'!'", "'true'", "'false'" ];
	static symbolicNames = [ null, null, "FIN", "PLUS", "MINUS", "TIMES", "DIV", 
                          "EQUALS", "GATO", "DOLLAR", "DOBLEPUNTO", "ANDPERSON", 
                          "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                          "PRINT", "IF", "NUM", "VUL", "V", "ID", "NUMBER", 
                          "STRING", "CHAR", "WS", "SALTO", "IGUAL", "DISTINTO", 
                          "MAYOR", "MENOR", "MAYORIGUAL", "MENORIGUAL", 
                          "AND", "OR", "NOT", "TRUE", "FALSE" ];
	static ruleNames = [ "T__0", "FIN", "PLUS", "MINUS", "TIMES", "DIV", "EQUALS", 
                      "GATO", "DOLLAR", "DOBLEPUNTO", "ANDPERSON", "COMMA", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PRINT", "IF", 
                      "NUM", "VUL", "V", "ID", "NUMBER", "STRING", "CHAR", 
                      "WS", "SALTO", "IGUAL", "DISTINTO", "MAYOR", "MENOR", 
                      "MAYORIGUAL", "MENORIGUAL", "AND", "OR", "NOT", "TRUE", 
                      "FALSE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ArrayInitLexer.EOF = antlr4.Token.EOF;
ArrayInitLexer.T__0 = 1;
ArrayInitLexer.FIN = 2;
ArrayInitLexer.PLUS = 3;
ArrayInitLexer.MINUS = 4;
ArrayInitLexer.TIMES = 5;
ArrayInitLexer.DIV = 6;
ArrayInitLexer.EQUALS = 7;
ArrayInitLexer.GATO = 8;
ArrayInitLexer.DOLLAR = 9;
ArrayInitLexer.DOBLEPUNTO = 10;
ArrayInitLexer.ANDPERSON = 11;
ArrayInitLexer.COMMA = 12;
ArrayInitLexer.LPAREN = 13;
ArrayInitLexer.RPAREN = 14;
ArrayInitLexer.LBRACE = 15;
ArrayInitLexer.RBRACE = 16;
ArrayInitLexer.PRINT = 17;
ArrayInitLexer.IF = 18;
ArrayInitLexer.NUM = 19;
ArrayInitLexer.VUL = 20;
ArrayInitLexer.V = 21;
ArrayInitLexer.ID = 22;
ArrayInitLexer.NUMBER = 23;
ArrayInitLexer.STRING = 24;
ArrayInitLexer.CHAR = 25;
ArrayInitLexer.WS = 26;
ArrayInitLexer.SALTO = 27;
ArrayInitLexer.IGUAL = 28;
ArrayInitLexer.DISTINTO = 29;
ArrayInitLexer.MAYOR = 30;
ArrayInitLexer.MENOR = 31;
ArrayInitLexer.MAYORIGUAL = 32;
ArrayInitLexer.MENORIGUAL = 33;
ArrayInitLexer.AND = 34;
ArrayInitLexer.OR = 35;
ArrayInitLexer.NOT = 36;
ArrayInitLexer.TRUE = 37;
ArrayInitLexer.FALSE = 38;



