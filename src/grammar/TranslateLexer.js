// Generated from ./grammar/Translate.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,
0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,5,
19,138,8,19,10,19,12,19,141,9,19,1,20,4,20,144,8,20,11,20,12,20,145,1,21,
1,21,5,21,150,8,21,10,21,12,21,153,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,4,32,186,8,32,11,32,12,
32,187,1,32,1,32,1,151,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,4,
3,0,65,90,94,94,97,122,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,
32,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,
1,0,0,0,3,72,1,0,0,0,5,75,1,0,0,0,7,82,1,0,0,0,9,87,1,0,0,0,11,93,1,0,0,
0,13,97,1,0,0,0,15,103,1,0,0,0,17,110,1,0,0,0,19,115,1,0,0,0,21,117,1,0,
0,0,23,119,1,0,0,0,25,121,1,0,0,0,27,123,1,0,0,0,29,125,1,0,0,0,31,127,1,
0,0,0,33,129,1,0,0,0,35,131,1,0,0,0,37,133,1,0,0,0,39,135,1,0,0,0,41,143,
1,0,0,0,43,147,1,0,0,0,45,156,1,0,0,0,47,160,1,0,0,0,49,163,1,0,0,0,51,166,
1,0,0,0,53,168,1,0,0,0,55,170,1,0,0,0,57,173,1,0,0,0,59,176,1,0,0,0,61,179,
1,0,0,0,63,182,1,0,0,0,65,185,1,0,0,0,67,68,5,109,0,0,68,69,5,97,0,0,69,
70,5,105,0,0,70,71,5,110,0,0,71,2,1,0,0,0,72,73,5,105,0,0,73,74,5,102,0,
0,74,4,1,0,0,0,75,76,5,112,0,0,76,77,5,114,0,0,77,78,5,105,0,0,78,79,5,110,
0,0,79,80,5,116,0,0,80,81,5,102,0,0,81,6,1,0,0,0,82,83,5,116,0,0,83,84,5,
114,0,0,84,85,5,117,0,0,85,86,5,101,0,0,86,8,1,0,0,0,87,88,5,102,0,0,88,
89,5,97,0,0,89,90,5,108,0,0,90,91,5,115,0,0,91,92,5,101,0,0,92,10,1,0,0,
0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,116,0,0,96,12,1,0,0,0,97,98,5,
102,0,0,98,99,5,108,0,0,99,100,5,111,0,0,100,101,5,97,0,0,101,102,5,116,
0,0,102,14,1,0,0,0,103,104,5,115,0,0,104,105,5,116,0,0,105,106,5,114,0,0,
106,107,5,105,0,0,107,108,5,110,0,0,108,109,5,103,0,0,109,16,1,0,0,0,110,
111,5,99,0,0,111,112,5,104,0,0,112,113,5,97,0,0,113,114,5,114,0,0,114,18,
1,0,0,0,115,116,5,40,0,0,116,20,1,0,0,0,117,118,5,41,0,0,118,22,1,0,0,0,
119,120,5,123,0,0,120,24,1,0,0,0,121,122,5,125,0,0,122,26,1,0,0,0,123,124,
5,59,0,0,124,28,1,0,0,0,125,126,5,43,0,0,126,30,1,0,0,0,127,128,5,45,0,0,
128,32,1,0,0,0,129,130,5,42,0,0,130,34,1,0,0,0,131,132,5,47,0,0,132,36,1,
0,0,0,133,134,5,61,0,0,134,38,1,0,0,0,135,139,7,0,0,0,136,138,7,1,0,0,137,
136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,40,1,0,0,
0,141,139,1,0,0,0,142,144,7,2,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,
1,0,0,0,145,146,1,0,0,0,146,42,1,0,0,0,147,151,5,34,0,0,148,150,9,0,0,0,
149,148,1,0,0,0,150,153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,0,0,152,154,
1,0,0,0,153,151,1,0,0,0,154,155,5,34,0,0,155,44,1,0,0,0,156,157,5,39,0,0,
157,158,9,0,0,0,158,159,5,39,0,0,159,46,1,0,0,0,160,161,5,61,0,0,161,162,
5,61,0,0,162,48,1,0,0,0,163,164,5,33,0,0,164,165,5,61,0,0,165,50,1,0,0,0,
166,167,5,62,0,0,167,52,1,0,0,0,168,169,5,60,0,0,169,54,1,0,0,0,170,171,
5,62,0,0,171,172,5,61,0,0,172,56,1,0,0,0,173,174,5,60,0,0,174,175,5,61,0,
0,175,58,1,0,0,0,176,177,5,38,0,0,177,178,5,38,0,0,178,60,1,0,0,0,179,180,
5,124,0,0,180,181,5,124,0,0,181,62,1,0,0,0,182,183,5,33,0,0,183,64,1,0,0,
0,184,186,7,3,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,
1,0,0,0,188,189,1,0,0,0,189,190,6,32,0,0,190,66,1,0,0,0,5,0,139,145,151,
187,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class TranslateLexer extends antlr4.Lexer {

    static grammarFileName = "Translate.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'main'", "'if'", "'printf'", "'true'", "'false'", 
                         "'int'", "'float'", "'string'", "'char'", "'('", 
                         "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", 
                         "'/'", "'='", null, null, null, null, "'=='", "'!='", 
                         "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'" ];
	static symbolicNames = [ null, "MAIN", "IF", "PRINT", "TRUE", "FALSE", 
                          "INT", "FLOAT", "STRING", "CHAR", "LPAREN", "RPAREN", 
                          "LBRACE", "RBRACE", "FIN", "PLUS", "MINUS", "TIMES", 
                          "DIV", "EQUALS", "ID", "NUMBER", "STRINGL", "CHARL", 
                          "IGUAL", "DISTINTO", "MAYOR", "MENOR", "MAYORIGUAL", 
                          "MENORIGUAL", "AND", "OR", "NOT", "WS" ];
	static ruleNames = [ "MAIN", "IF", "PRINT", "TRUE", "FALSE", "INT", "FLOAT", 
                      "STRING", "CHAR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "FIN", "PLUS", "MINUS", "TIMES", "DIV", "EQUALS", 
                      "ID", "NUMBER", "STRINGL", "CHARL", "IGUAL", "DISTINTO", 
                      "MAYOR", "MENOR", "MAYORIGUAL", "MENORIGUAL", "AND", 
                      "OR", "NOT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

TranslateLexer.EOF = antlr4.Token.EOF;
TranslateLexer.MAIN = 1;
TranslateLexer.IF = 2;
TranslateLexer.PRINT = 3;
TranslateLexer.TRUE = 4;
TranslateLexer.FALSE = 5;
TranslateLexer.INT = 6;
TranslateLexer.FLOAT = 7;
TranslateLexer.STRING = 8;
TranslateLexer.CHAR = 9;
TranslateLexer.LPAREN = 10;
TranslateLexer.RPAREN = 11;
TranslateLexer.LBRACE = 12;
TranslateLexer.RBRACE = 13;
TranslateLexer.FIN = 14;
TranslateLexer.PLUS = 15;
TranslateLexer.MINUS = 16;
TranslateLexer.TIMES = 17;
TranslateLexer.DIV = 18;
TranslateLexer.EQUALS = 19;
TranslateLexer.ID = 20;
TranslateLexer.NUMBER = 21;
TranslateLexer.STRINGL = 22;
TranslateLexer.CHARL = 23;
TranslateLexer.IGUAL = 24;
TranslateLexer.DISTINTO = 25;
TranslateLexer.MAYOR = 26;
TranslateLexer.MENOR = 27;
TranslateLexer.MAYORIGUAL = 28;
TranslateLexer.MENORIGUAL = 29;
TranslateLexer.AND = 30;
TranslateLexer.OR = 31;
TranslateLexer.NOT = 32;
TranslateLexer.WS = 33;



